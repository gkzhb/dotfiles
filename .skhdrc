# NOTICE: I use fish shell as default shell.
# Therefore, if you are not using fish shell, you need to modify something like
# replacing logic operation `and`, `or` to those in bash shell

# {{{1 SYNTAX EXPLANATION
 ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
# }}}

# {{{1 modes declare
:: default : set -Ux SKHD_MODE default; sn 'skhd: default mode'; open -gj 'swiftbar://refreshplugin?name=yabai'
:: resize : set -Ux SKHD_MODE resize; sn 'skhd: resize mode'; open -gj 'swiftbar://refreshplugin?name=yabai'

# {{{1 default mode
# {{{2 focus related
# {{{3 focus windows
# move focus to left, down, up, right
alt - h : yabai -m window --focus west || yabai -m display --focus west
alt - j : yabai -m window --focus south || yabai -m display --focus south
alt - k : yabai -m window --focus north || yabai -m display --focus north
alt - l : yabai -m window --focus east || yabai -m display --focus east

# cycle focus through the windows
# ref: https://github.com/koekeishiya/yabai/issues/113
# stack related: https://github.com/koekeishiya/yabai/issues/203

# focus next/previous stack window.
# If failed, focus next/previous window
# If still failed, focus first stack window or focus first window
alt - n : yabai -m window --focus stack.next || yabai -m window --focus (yabai -m query --windows --space | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id") || yabai -m window --focus stack.first || yabai -m window --focus first
alt - p : yabai -m window --focus stack.prev || yabai -m window --focus (yabai -m query --windows --space | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | nth(index(map(select(.\"has-focus\" == true))) - 1).id") || yabai -m window --focus stack.last || yabai -m window --focus last

# {{{3 focus spaces

# focus next display(circle when reached the last one)
alt - tab : yabai -m display --focus next || yabai -m display --focus first
# focus previous next display
shift + alt - tab : yabai -m display --focus prev || yabai -m display --focus last

# fast focus desktop(not work without disabling SIP)
# alt - x : yabai -m space --focus recent
# alt - 1 : yabai -m space --focus 1
# alt - 2 : yabai -m space --focus 2
# alt - 3 : yabai -m space --focus 3
# alt - 4 : yabai -m space --focus 4

# {{{2 move window
# move managed window
shift + alt - h : yabai -m window --swap west; or yabai -m window --display west && yabai -m display --focus west # yabai -m window --warp west
shift + alt - j : yabai -m window --swap south; or yabai -m window --display south && yabai -m display --focus south # yabai -m window --warp south
shift + alt - k : yabai -m window --swap north; or yabai -m window --display north && yabai -m display --focus north # yabai -m window --warp north
shift + alt - l : yabai -m window --swap east; or yabai -m window --display east && yabai -m display --focus east # yabai -m window --warp east

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# send window to desktop
shift + alt - 1 : yabai -m window --space 1 # ; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space 2 # ; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space 3 # ; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space 4 # ; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space 5 # ; yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space 6 # ; yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space 7 # ; yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space 8 # ; yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space 9 # ; yabai -m space --focus 9
shift + alt - 0 : yabai -m window --space 10 # ; yabai -m space --focus 9
shift + cmd - 1 : yabai -m window --space 11
shift + cmd - 2 : yabai -m window --space 12
shift + cmd - 3 : yabai -m window --space 13
shift + cmd - 4 : yabai -m window --space 14
shift + cmd - 5 : yabai -m window --space 15
shift + cmd - 6 : yabai -m window --space 16
shift + cmd - 7 : yabai -m window --space 17
shift + cmd - 8 : yabai -m window --space 18
shift + cmd - 9 : yabai -m window --space 19
shift + cmd - 0 : yabai -m window --space 20
shift + alt - n : yabai -m window --space  next
shift + alt - p : yabai -m window --space  prev

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# {{{3 resize window
# increase window size
shift + cmd - l : yabai -m window --resize left:-20:0 || yabai -m window --resize right:20:0
shift + cmd - j : yabai -m window --resize top:0:-20 || yabai -m window --resize bottom:0:20

# decrease window size
shift + cmd - k : yabai -m window --resize bottom:0:-20 || yabai -m window --resize top:0:20;
shift + cmd - h : yabai -m window --resize left:20:0 || yabai -m window --resize right:-20:0

# set insertion point in focused container @TODO
# ctrl + alt - h : yabai -m window --insert west

# {{{3 window action
# close focused window
alt - q : yabai -m window --close

# toggle window zoom
alt - d : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
alt - v : yabai -m window --toggle split

# stack to next window
alt - s : yabai -m window --stack next
# stack to previous window
alt + shift - s : yabai -m window --stack prev

# float / unfloat window and center on screen
shift + alt - space : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
alt - m : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle pip
# {{{2 shell actions
# rename space
ctrl + alt - r : $HOME/scripts/yabai/rename-space.fish
# {{{3 Start App
shift + alt - r : brew services restart yabai && brew services restart skhd
alt - t : $HOME/scripts/yabai/open-kitty.sh
# {{{1 resize mode
# activate 'resize' mode
alt - r ; resize

# {{{2 actions in resize mode
resize < h : yabai -m window --resize left:-20:0
resize < shift - h : yabai -m window --resize left:20:0
resize < j : yabai -m window --resize bottom:0:20
resize < shift - j : yabai -m window --resize bottom:0:-20
resize < k : yabai -m window --resize top:0:-20
resize < shift - k : yabai -m window --resize top:0:20
resize < l : yabai -m window --resize right:20:0
resize < shift - l : yabai -m window --resize right:-20:0

# activate 'default' mode
resize < alt - q ; default
resize < escape ; default
# resize < return ; default

# vim:fileencoding=utf-8:ft=conf:foldmethod=marker
